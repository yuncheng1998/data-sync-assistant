generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id            String    @id
  shop          String
  state         String
  isOnline      Boolean   @default(false)
  scope         String?
  expires       DateTime?
  accessToken   String
  userId        BigInt?
  firstName     String?
  lastName      String?
  email         String?
  accountOwner  Boolean   @default(false)
  locale        String?
  collaborator  Boolean?  @default(false)
  emailVerified Boolean?  @default(false)
}

model Product {
  id          String           @id
  shop        String
  title       String
  description String?
  vendor      String?
  productType String?
  status      String?
  handle      String?
  publishedAt DateTime?
  createdAt   DateTime?
  updatedAt   DateTime?
  tags        String[]
  options     Json?
  metafields  Json?
  syncedAt    DateTime         @default(now())
  images      ProductImage[]
  variants    ProductVariant[]
}

model ProductImage {
  id        String  @id
  productId String
  src       String
  altText   String?
  width     Int?
  height    Int?
  position  Int?
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model ProductVariant {
  id                String   @id
  productId         String
  title             String?
  price             String?
  compareAtPrice    String?
  sku               String?
  position          Int?
  inventoryPolicy   String?
  inventoryQuantity Int?
  weightUnit        String?
  weight            Float?
  requiresShipping  Boolean?
  barcode           String?
  imageId           String?
  inventoryItem     Json?
  product           Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Order {
  id                String          @id
  shop              String
  name              String
  email             String?
  createdAt         DateTime?
  updatedAt         DateTime?
  totalPrice        String
  currencyCode      String
  financialStatus   String?
  fulfillmentStatus String?
  syncedAt          DateTime        @default(now())
  customerData      Json?
  lineItems         OrderLineItem[]
}

model OrderLineItem {
  id        String  @id
  orderId   String
  title     String
  quantity  Int
  sku       String?
  variantId String?
  price     String?
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

// 同步任务历史记录
model SyncTask {
  id          Int       @id @default(autoincrement())
  taskType    String    // 任务类型: product, order, customer
  shopId      String    // 店铺名称，如果是全局任务则为 "all"
  status      String    // 任务状态: pending, completed, failed
  startTime   DateTime  // 任务开始时间
  endTime     DateTime? // 任务结束时间
  duration    Int?      // 任务持续时间（毫秒）
  resultData  Json?     // 结果数据
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
}

// 价格规则
model PriceRule {
  id                String          @id
  shop              String          // 店铺域名
  title             String          // 规则标题
  startsAt          DateTime        // 开始时间
  endsAt            DateTime?       // 结束时间（可为空表示永不过期）
  valueType         String          // 折扣类型（如percentage, fixed_amount）
  value             String          // 折扣值（数值字符串）
  targetType        String          // 目标类型（如line_item, shipping_line）
  oncePerCustomer   Boolean         // 每个客户仅限一次使用
  usageLimit        Int?            // 使用次数限制（可为空表示无限制）
  customerSelection String          // 客户选择方式（如all, prerequisite）
  createdAt         DateTime        // 创建时间
  updatedAt         DateTime        // 更新时间
  syncedAt          DateTime        @default(now()) // 同步时间
  discountCodes     DiscountCode[]  // 关联的折扣码
}

// 折扣码
model DiscountCode {
  id          String    @id
  priceRuleId String    // 关联的价格规则ID
  code        String    // 折扣码
  usageCount  Int       // 使用次数
  createdAt   DateTime  // 创建时间
  updatedAt   DateTime  // 更新时间
  syncedAt    DateTime  @default(now()) // 同步时间
  priceRule   PriceRule @relation(fields: [priceRuleId], references: [id], onDelete: Cascade)
}
